<tool id="cluster_analyze_embed_muon" name="muon Cluster, analyze, and embed multimodal data" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
@CMD@
]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

#if $method.method == 'ica'
mu.tl.ica(
    mdata,
    basis='$method.basis',
    #if str($method.n_components) != ''
    n_components=$method.n_components,
    #end if
    #if str($method.random_state) != ''
    random_state=$method.random_state,
    #end if 
    scale=$method.scale,
    copy=False
)

#else if $method.method == 'leiden'
mu.tl.leiden(
    mdata,
    key_added='$method.key_added',
    resolution=$method.resolution,
    random_state=$method.random_state,
    mod_weights=$method.mod_weights,
    n_iterations=$method.n_iterations
)

#else if $method.method == 'louvain'
mu.tl.louvain(
mdata,
    key_added='$method.key_added',
    resolution=$method.resolution,
    random_state=$method.random_state,
    mod_weights=$method.mod_weights
)

#else if $method.method == 'mofa'
mu.tl.mofa(
    mdata,
    n_factors=$method.mofa_n_factors
)

#else if $method.method == 'snf'
mu.tl.snf(
    mdata,
    n_neighbors=$method.n_neighbors,
    neighbor_keys=$method.neighbor_keys,
    key_added=$method.key_added,
    n_iterations=$method.n_iterations,
    sigma=$method.sigma
)

#else if $method.method == 'umap'
mu.tl.umap(
    mdata,
    min_dist=$method.min_dist,
    spread=$method.spread,
    n_components=$method.n_components,
    maxiter=$method.maxiter,
    alpha=$method.alpha,
    gamma=$method.gamma,
    negative_sample_rate=$method.negative_sample_rate,
    init_pos='$method.init_pos',
    random_state=$method.random_state,
    a=$method.a,
    b=$method.b,
    neighbors_key=$method.neighbors_key
)

#end if
mdata.write("mudata_with_processing.h5mu")
]]></configfile>
    </configfiles>
    <inputs>
        <param name="mudata_input" type="data" format="h5mu" label="MuData input file to run processing" help="(.h5mu)"/>
        <conditional name="method">
            <param name="method" type="select" label="Method used for processing">
                <option value="ica">Run Independent component analysis, using 'muon.tl.ica'</option>
                <option value="leiden">Cluster: Cluster cells using the Leiden algorithm, using 'muon.tl.leiden'</option>
                <option value="louvain">Cluster: Cluster cells using the Louvain algorithm, using 'muon.tl.louvain'</option>
                <option value="mofa">Analyze: Run Multi Omics Factor Analysis, using 'muon.tl.mofa'</option>
                <option value="snf">Analyze: Similarity Network Fusion, using 'muon.tl.snf'</option>
                <option value="umap">Embed: Embed the multimodal neighborhood graph using UMAP, using 'muon.tl.umap'</option>
            </param>
            <when value="ica">
                <param argument="basis" type="text" value="X_pca" label="Basis for Independent Component Analysis"/>
                <param argument="n_components" type="integer" value="" optional="true" label="Number of components"/>
                <expand macro="param_random_state" seed=""/>
                <param argument="scale" type="boolean" truevalue="True" falsevalue="False" checked="False" label="Use scaling?"/>
            </when>
            <when value="leiden">
                <expand macro="param_resolution"/>
                <expand macro="param_weight"/>
                <expand macro="param_random_state" seed="0"/>
                <expand macro="param_key_added" key_added="leiden"/>
                <expand macro="param_neighbors_key"/>
                <expand macro="param_directed"/>
            </when>
            <when value="louvain">
                <expand macro="param_resolution"/>
                <expand macro="param_weight"/>
                <expand macro="param_random_state" seed="0"/>
                <expand macro="param_key_added" key_added="louvain"/>
                <expand macro="param_neighbors_key"/>
                <expand macro="param_directed"/>
            </when>
            <when value="mofa">
                <param argument="groups_label" type="text" optional="true" value="" label="a column name in adata.obs for grouping the samples"/>
                <expand macro="param_use_raw"/>
                <param argument="use_layer" type="text" value="" optional="true" label="Use a specific layer of AnnData as input values"
                    help="supersedes use_raw option"/>
                <param argument="use_var" type="text" value="" optional="true" label=".var column with a boolean value to select genes"
                    help="e.g. “highly_variable”"/>
                <param argument="use_obs" type="select" optional="true" label="strategy to deal with samples (cells) not being the same across modalities"
                    help="Throws error if there are cells that are not same across modalities">
                    <option value="union">union</option>
                    <option value="intersection">intersection</option>
                </param>
                <param name="n_factors" type="integer" value="10" label="Number of factors to train the model with"/>
                <param argument="scale_views" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Scale views to unit variance"/>
                <param argument="scale_groups" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Scale groups to unit variance"/>
                <param argument="center_groups" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Center groups to zero mean"/>
                <param argument="ard_weights" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Use view-wise sparsity"/>
                <param argument="ard_factors" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Use group-wise sparsity"/>
                <param argument="spikeslab_weights" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Use feature-wise sparsity (e.g. gene-wise)"/>
                <param argument="spikeslab_factors" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Use sample-wise sparsity (e.g. cell-wise)"/>
                <param name="n_iterations" type="integer" value="1000" label="Upper limit on the number of iterations"/>
                <param argument="convergence_mode" type="select" label="Convergence mode">
                    <option value="fast">fast</option>
                    <option value="medium">medium</option>
                    <option value="slow">slow</option>
                </param>        
                <param argument="use_float32" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Use reduced precision"/>
                <conditional name="svi">
                    <param name="svi_mode" type="select" label="Use Stochastic Variational Inference (SVI)?">
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </param>
                    <when value="yes">
                        <param argument="svi_batch_size" type="float" value="0.5" min="0" max="1" label="Batch size as a fraction"/>
                        <param argument="svi_learning_rate" type="float" value="1.0" min="0" max="1" label="Learning rate"/>
                        <param argument="svi_forgetting_rate" type="float" value="0.5" min="0" max="1" label="Forgetting rate"/>
                        <param argument="svi_start_stochastic" type="integer" value="1" label="First iteration to start SVI"/>
                    </when>
                    <when value="no"/>
                </conditional>
                <param argument="smooth_covariate" type="text" value="" optional="true" label="Use a covariate (column in .obs) to learn smooth factors (MEFISTO)"/>
                <param argument="smooth_warping" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Learn the alignment of covariates (e.g. time points) from different groups?"/>
                <param argument="seed" type="integer" value="1" label="Random seed"/>
            </when>
            <when value="snf">
                <param argument="n_neighbors" type="integer" value="20" label="Number of neighbours to be used in the K-nearest neighbours step"/>
                <expand macro="param_key_added_common"/>
                <param argument="n_iterations" type="integer" value="20" label="Number of iterations for the diffusion process"/>
                <param argument="sigma" type="float" value="0.5" label="Variance for the local model when calculating affinity matrices"/>
                <expand macro="param_eps" eps_value="2.220446049250313e-16"/>
                <expand macro="param_neighbor_keys"/>
            </when>
            <when value="umap">
                <param argument="min_dist" type="float" min="0" value="0.5" label="The effective minimum distance between embedded points" 
                    help="Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points."/>
                <param argument="spread" type="float" value="1.0" label="The effective scale of embedded points"
                    help="Determines how clustered/clumped the embedded points are"/>
                <param argument="n_components" type="integer" value="2" label="The number of dimensions of the embedding"/>
                <param argument="maxiter" type="integer" value="" optional="true" label="The number of iterations (epochs) of the optimization"
                    help="Called `n_epochs` in the original UMAP"/>
                <param argument="alpha" type="float" value="1.0" label="The initial learning rate for the embedding optimization"/>
                <param argument="gamma" type="float" value="1.0" label="Weighting applied to negative samples in low dimensional embedding optimization"
                    help="Values higher than one will result in greater weight being given to negative samples"/>
                <param argument="negative_sample_rate" type="integer" value="5" label="Negative sample rate" 
                    help="The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding"/>
                <param argument="init_pos" type="select" label="How to initialize the low dimensional embedding"
                    help="Called `init` in the original UMAP">
                    <option value="spectral">Use a spectral embedding of the graph</option>
                    <option value="random">Assign initial embedding positions at random</option>
                </param>
                <expand macro="param_random_state" seed="42"/>
                <expand macro="param_neighbors_key"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="mudata_with_processing" format="h5mu" label="MuData with Processing" from_work_dir="mudata_with_processing.h5mu"/>
    </outputs>
    <tests>
        <test>
            <!--Test for leiden-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="leiden"/>
            <param name="resolution" value="1"/>
            <param name="random_state" value="0"/>
            <param name="key_added" value="leiden_joint"/>
            <param name="mod_weights" value="1"/>
            <param name="n_iterations" value="-1"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
        <test>
            <!--Test for louvain-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="louvain"/>
            <param name="resolution" value="1"/>
            <param name="random_state" value="0"/>
            <param name="key_added" value="louvain"/>
            <param name="mod_weights" value="1"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
        <test>
            <!--Test for mofa-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="mofa"/>
            <param name="n_factors" value="10"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
        <test>
            <!--Test for snf-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="snf"/>
            <param name="n_neighbors" value="20"/>
            <param name="neighbor_keys" value="neighbors"/>
            <param name="key_added" value="neighbors"/>
            <param name="n_iterations" value="20"/>
            <param name="sigma" value="0.5"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
        <test>
            <!--Test for umap-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="umap"/>
            <param name="min_dist" value="0.5"/>
            <param name="spread" value="1.0"/>
            <param name="n_components" value="2"/>
            <param name="maxiter" value="None"/>
            <param name="alpha" value="1.0"/>
            <param name="gamma" value="1.0"/>
            <param name="negative_sample_rate" value="5"/>
            <param name="init_pos" value="spectral"/>
            <param name="random_state" value="42"/>
            <param name="neighbors_key" value="None"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
    </tests>
    <help><![CDATA[
Cluster: Cluster cells using the Leiden algorithm (`muon.tl.leiden`)
====================================================================

        Cluster cells using the Leiden algorithm. This runs only the multiplex Leiden algorithm on the MuData object
        using connectivities of individual modalities.

        More details on the `muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.tl.leiden.html#muon.tl.leiden>`__

Cluster: Cluster cells using the Louvain algorithm ('muon.tl.louvain')
======================================================================

        Cluster cells using the Louvain algorithm. This runs only the multiplex Louvain algorithm on the MuData object
        using connectivities of individual modalities

        More details on the `muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.tl.louvain.html#muon.tl.louvain>`__

Analyze: Run Multi Omics Factor Analysis ('muon.tl.mofa')
=========================================================

        Run Multi-Omics Factor Analysis

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.tl.mofa.html#muon.tl.mofa>`__

Analyze: Similarity Network Fusion ('muon.tl.snf')
==================================================

        Similarity network fusion (SNF). See Wang et al., 2014 (DOI: 10.1038/nmeth.2810).

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.tl.snf.html#muon.tl.snf>`__

Embed: Embed the multimodal neighborhood graph using UMAP ('muon.tl.umap')
==========================================================================

        Embed the multimodal neighborhood graph using UMAP (McInnes et al, 2018). UMAP (Uniform Manifold Approximation
        and Projection) is a manifold learning technique suitable for visualizing high-dimensional data.

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.tl.umap.html#muon.tl.umap>`__

    ]]></help>
    <citations>
        <citation type="bibtex">
}</citation>
    </citations>
</tool>