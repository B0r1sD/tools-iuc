<tool id="constava" name="Constava" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.00">
    <description>Conformational state variability from protein ensembles</description>
    <macros>
        <token name="@TOOL_VERSION@">1.1.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">constava</requirement>
    </requirements>
    <command detect_errors="exit_code">
    <![CDATA[
    echo "Starting Constava execution from Galaxy" &&
    #for $input_file_id, $input_file in enumerate( $input_options.input_files ):
        #set ref_name = str($input_file.element_identifier)
        ln -sv ${input_file} $ref_name &&
    #end for

    #if $input_options.input_degrees == "Degrees"
        #set angle_units = "--degrees"
    #else
        #set angle_units = ""
    #end if

    #if $conformational_state_model_options.use_custom_model
        #if $conformational_state_model_options.use_custom_input_file
            #if $conformational_state_model_options.custom_input_file_degrees == "Degrees"
                #set custom_input_file_angle_units = "--degrees"
            #else
                #set custom_input_file_angle_units = ""
            #end if

            #set ref_name_train_data = str($conformational_state_model_options.custom_input_file.element_identifier)
            #set custom_input_parameter="--input " + str($conformational_state_model_options.custom_input_file.element_identifier) + " " + $custom_input_file_angle_units
            ln -sv ${$conformational_state_model_options.custom_input_file} $ref_name_train_data &&
        #else
            #set custom_input_parameter=""
        #end if

        #if $conformational_state_model_options.model_type == "kde"
            #set model_file = "custom_model.kde.pkl"
            #set load_model_param="--load-model custom_model.kde.pkl"
            constava fit-model -vv --model-type kde --kde-bandwidth $conformational_state_model_options.bandwidth $custom_input_parameter --output $model_file &&
        #else if $conformational_state_model_options.model_type == "grid"
            #set model_file = "custom_model.grid.pkl"
            #set load_model_param="--load-model custom_model.grid.pkl"
            constava fit-model -vv --model-type grid --grid-points $grid_points --kde-bandwidth $conformational_state_model_options.bandwidth $custom_input_parameter --output $model_file &&
        #else
            #set load_model_param=""
        #end if

        #if $conformational_state_model_options.use_custom_input_file
            rm $ref_name_train_data &&
        #end if
    #else
        #set load_model_param=""
    #end if

    constava analyze -vv $load_model_param --input
    #for $input_file_id, $input_file in enumerate( $input_files ):
        #set ref_name = str($input_file.element_identifier)
        $ref_name
    #end for
    --input-format $input_options.input_format
    --output output_constava.csv

    #if $subsampling_type == "window"
        --window $subsampling_options.window_size
    #else if $subsampling_type == "bootstrap"
        #if $return_bootstrap_series
            --bootstrap-series $bootstrap_size
        #else
            --bootstrap $bootstrap_size
        #end if
        --bootstrap-samples $bootstrap_samples --seed $bootstrap_seed
    #end if

    $angle_units &&

    #for $input_file_id, $input_file in enumerate( $input_options.input_files ):
        #set ref_name = str($input_file.element_identifier)
        rm $ref_name &&
    #end for

    echo "Constava execution from Galaxy has finished"
    ]]>
    </command>
    <inputs>
        <section name="input_options" title="Input Options" expanded="true" help="As input data the backbone dihedral angles extracted from the conformational ensemble need to be provided. Important: Given Constava extracts RESNAME and RESINDEX from filenames when using XVG format, your files must follow this regex 'ramaPhiPsi([A-Z][A-Z0-9][A-Z0-9])([0-9]+).xvg'">
            <param name="input_files" type="data" format="csv,xvg" label="Dihedral angles file" help="Upload the input file(s) that contain the dihedral angles in CSV or XVG format (GROMACS' `gmx chi` module)." multiple="true"/>
            <param name="input_format" type="select" label="Input file format" help="Select the format of the input file or choose auto to let the system decide based on the file extension and content.">
                <option value="csv" selected="true">CSV</option>
                <option value="xvg">XVG</option>
            </param>
            <param name="input_degrees" type="select" label="Are the dihedral angles in that file in radians or degrees?" help="Indicate if the dihedral angles are in radians or degrees.">
                <option value="Radians">Radians</option>
                <option value="Degrees" selected="true">Degrees</option>
            </param>
        </section>
        <section name="conformational_state_model_options" title="Kernel Options" help="By default, the conformational state models are generated on-the-fly when running Constava. In selected cases generating a model beforehand and loading it can be useful, though.">
            <conditional name="custom_model">
                <param name="use_custom_model" type="boolean" label="Do you want to train a custom probabilistic model of conformational states?" />
                <when value="true">
                    <conditional name="model_type_options">
                        <param name="model_type" type="select" label="Select a model type" help="We provide two model types. KDE models are the default. They are fast to fit but may be slow in the inference in large conformational ensembles (e.g. long-timescale MD simulations). The idea of Grid models is, to replace the continuous probability density function of the kde-Model by a fixed set of grid-points. The PDF for any sample is then estimated by linear interpolation between the nearest grid points. This is slightly less accurate than the kde-Model but speeds up inference significantly.">
                            <option value="kde">KDE model</option>
                            <option value="grid">Grid model</option>
                        </param>
                        <when value="kde">
                            <param name="bandwidth" type="float" label="Which bandwidth do you want to use?" help="This flag controls the bandwidth of the Gaussian kernel density estimator. (default: 0.13)" value="0.13" />
                        </when>
                        <when value="grid">
                            <param name="bandwidth" type="float" label="Which bandwidth do you want to use?" value="0.13" help="This flag controls the bandwidth of the Gaussian kernel density estimator. (default: 0.13)" />
                            <param name="grid_points" type="integer" label="Grid points" value="10000" help="This flag controls how many grid points are used to describe the probability density function. (default: 10000)" />
                        </when>
                    </conditional>
                    <conditional name="json">
                        <param name="use_custom_input_file" type="boolean" label="Do you want to train probability density functions with custom data?" help="If not, the default data from the publication will be used." />
                        <when value="true">
                            <param name="custom_input_file" type="data" format="json" label="File for pdf fitting in JSON format" help="The data to which the new conformational state models will be fitted. It should be provided as a JSON file. The top-most key should indicate the names of the conformational states. On the level below, lists of phi-psi pairs for each stat should be provided."/>
                            <param name="custom_input_file_degrees" type="select" label="Are the dihedral angles in that file in radians or degrees?" help="Indicate if the dihedral angles of the training data file are in radians or degrees.">
                                <option value="Radians">Radians</option>
                                <option value="Degrees" selected="true">Degrees</option>
                            </param>
                        </when>
                    </conditional>
                </when>
                <when value="false">
                </when>
            </conditional>
        </section>
        <section name="subsampling_options" title="Subsampling Options" help="Do inference using either a moving reading-frame of consecutive samples (sliding window) or using a moving reading-frame of consecutive samples (bootstrap).">
            <conditional name="sampling_options">
                <param name="subsampling_type" type="select" label="Select a subsampling method to configure" help="You must select and configure at least one subsampling option.">
                    <option value="window">Sliding window</option>
                    <option value="bootstrap">Bootstrap sampling</option>
                </param>
                <when value="window">
                    <param name="window_size" type="text" label="Window size (space-separated integers)" value="3" help="Specify window sizes for moving frame analysis, e.g., '3 5 7'. Each reading frame consists of consecutive samples. Multiple values can be provided."/>
                </when>
                <when value="bootstrap">
                    <param name="bootstrap_size" type="text" label="Bootstrap size (space-separated integers)" value="3" help="Do inference using N samples obtained through bootstrapping. Specify bootstrap sizes, e.g., '10 20 30'. Samples obtained through bootstrapping. Multiple values can be provided." />
                    <param name="return_bootstrap_series" type="boolean" label="Return bootstrap series calculation" help="Return the results for every subsample rather than the average. This can result in very large output files." value="false"/>
                    <param name="bootstrap_samples" type="integer" label="Bootstrap samples" value="10000" help="When bootstrapping, sample times from the input data."/>
                    <param name="bootstrap_seed" type="integer" label="Bootstrap seed" value="42" help="Set random seed for bootstrap sampling."/>
                </when>
            </conditional>
        </section>
    </inputs>
    <outputs>
        <data name="file_contents" format="csv" label="${tool.name} on ${on_string}: File Contents" from_work_dir="output_constava.csv"/>
    </outputs>
    <tests>
        <!-- test_001: CSV Dihedrals in radians with window_size 3 using default PDF -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="false" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format csv" />
                <not_has_text text="degrees" />
                <not_has_text text="load-model" />
                <has_text text="window 3" />
                <has_text text="output output_constava.csv" />
            </assert_command>
            <output name="file_contents" file="expected/test_001.csv" ftype="csv" />
        </test>
        <!-- test_002: XVG Dihedrals in degrees with window_size 3 using default PDF -->
        <test expect_num_outputs="1">
            <param name="input_files" value="xvg/ramaPhiPsiALA18.xvg,xvg/ramaPhiPsiGLY11.xvg,xvg/ramaPhiPsiLEU45.xvg,xvg/ramaPhiPsiTHR2.xvg,xvg/ramaPhiPsiALA19.xvg,xvg/ramaPhiPsiGLY22.xvg,xvg/ramaPhiPsiLYS16.xvg,xvg/ramaPhiPsiTHR4.xvg,xvg/ramaPhiPsiALA26.xvg,xvg/ramaPhiPsiGLY33.xvg,xvg/ramaPhiPsiLYS44.xvg,xvg/ramaPhiPsiTHR7.xvg,xvg/ramaPhiPsiARG29.xvg,xvg/ramaPhiPsiGLY36.xvg,xvg/ramaPhiPsiLYS48.xvg,xvg/ramaPhiPsiTRP31.xvg,xvg/ramaPhiPsiASN15.xvg,xvg/ramaPhiPsiGLY42.xvg,xvg/ramaPhiPsiLYS49.xvg,xvg/ramaPhiPsiTYR21.xvg,xvg/ramaPhiPsiASN27.xvg,xvg/ramaPhiPsiGLY50.xvg,xvg/ramaPhiPsiLYS9.xvg,xvg/ramaPhiPsiTYR5.xvg,xvg/ramaPhiPsiASN3.xvg,xvg/ramaPhiPsiILE17.xvg,xvg/ramaPhiPsiPHE40.xvg,xvg/ramaPhiPsiTYR6.xvg,xvg/ramaPhiPsiASN32.xvg,xvg/ramaPhiPsiILE34.xvg,xvg/ramaPhiPsiSER10.xvg,xvg/ramaPhiPsiVAL23.xvg,xvg/ramaPhiPsiASP12.xvg,xvg/ramaPhiPsiILE39.xvg,xvg/ramaPhiPsiSER24.xvg,xvg/ramaPhiPsiVAL25.xvg,xvg/ramaPhiPsiASP37.xvg,xvg/ramaPhiPsiILE46.xvg,xvg/ramaPhiPsiSER30.xvg,xvg/ramaPhiPsiVAL41.xvg,xvg/ramaPhiPsiGLN20.xvg,xvg/ramaPhiPsiLEU14.xvg,xvg/ramaPhiPsiSER35.xvg,xvg/ramaPhiPsiVAL47.xvg,xvg/ramaPhiPsiGLN43.xvg,xvg/ramaPhiPsiLEU28.xvg,xvg/ramaPhiPsiSER51.xvg,xvg/ramaPhiPsiVAL8.xvg,xvg/ramaPhiPsiGLY1.xvg,xvg/ramaPhiPsiLEU38.xvg,xvg/ramaPhiPsiTHR13.xvg" ftype="xvg"/>
            <param name="input_format" value="xvg" />
            <param name="input_degrees" value="Degrees" />
            <param name="use_custom_model" value="false" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format xvg" />
                <has_text text="degrees" />
                <has_text text="window 3" />
                <has_text text="output output_constava.csv" />
                <not_has_text text="load-model" />
            </assert_command>
            <output name="file_contents" file="expected/test_002.csv" ftype="csv" />
        </test>
        <!-- test_003: custom probability density functions: kde -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="kde" />
            <param name="bandwidth" value="0.15" />
            <param name="use_custom_input_file" value="true" />
            <param name="custom_input_file" value="constava_csdata.json" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <has_text text="model-type kde"/>
                <has_text text="kde-bandwidth 0.15"/>
                <has_text text="input constava_csdata.json"/>
                <has_text text="output custom_model.kde.pkl"/>
                <has_text text="constava analyze -vv" />
                <has_text text="input dihedrals.csv" />
                <has_text text="output output_constava.csv" />
                <has_text text="load-model custom_model.kde.pkl" />
                <has_text text="window 3" />
            </assert_command>
            <output name="file_contents" file="expected/test_003.csv" ftype="csv" />
        </test>
        <!-- test_004: custom probability density functions: grid -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="grid" />
            <param name="grid_points" value="1500" />
            <param name="bandwidth" value="0.15" />
            <param name="use_custom_input_file" value="true" />
            <param name="custom_input_file" value="constava_csdata.json" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <has_text text="kde-bandwidth 0.15"/>
                <has_text text="model-type grid"/>
                <has_text text="grid-points 1500"/>
                <has_text text="input constava_csdata.json"/>
                <has_text text="output custom_model.grid.pkl"/>
                <has_text text="constava analyze -vv" />
                <has_text text="input dihedrals.csv" />
                <has_text text="output output_constava.csv" />
                <has_text text="load-model custom_model.grid.pkl" />
                <has_text text="window 3" />
            </assert_command>
            <output name="file_contents" file="expected/test_004.csv" ftype="csv" />
        </test>
        <!-- test_005: custom probability density functions without custom json: kde -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="kde" />
            <param name="bandwidth" value="0.15" />
            <param name="use_custom_input_file" value="false" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <has_text text="model-type kde"/>
                <has_text text="kde-bandwidth 0.15"/>
                <not_has_text text="input constava_csdata.json"/>
                <has_text text="output custom_model.kde.pkl"/>
                <has_text text="constava analyze -vv" />
                <has_text text="input dihedrals.csv" />
                <has_text text="output output_constava.csv" />
                <has_text text="load-model custom_model.kde.pkl" />
                <has_text text="window 3" />
            </assert_command>
            <output name="file_contents" file="expected/test_005.csv" ftype="csv" />
        </test>
        <!-- test_006: custom probability density functions without custom json: grid -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="grid" />
            <param name="grid_points" value="1500" />
            <param name="bandwidth" value="0.15" />
            <param name="use_custom_input_file" value="false" />
            <param name="subsampling_type" value="window" />
            <param name="window_size" value="3" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <has_text text="kde-bandwidth 0.15"/>
                <has_text text="model-type grid"/>
                <has_text text="grid-points 1500"/>
                <not_has_text text="input constava_csdata.json"/>
                <has_text text="output custom_model.grid.pkl"/>
                <has_text text="constava analyze -vv" />
                <has_text text="input dihedrals.csv" />
                <has_text text="output output_constava.csv" />
                <has_text text="load-model custom_model.grid.pkl" />
                <has_text text="window 3" />
            </assert_command>
            <output name="file_contents" file="expected/test_006.csv" ftype="csv" />
        </test>
        <!-- test_007: CSV Dihedrals in radians with bootstrap with default train data -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="false" />
            <param name="subsampling_type" value="bootstrap" />
            <param name="bootstrap_size" value="3" />
            <param name="return_bootstrap_series" value="false" />
            <param name="bootstrap_samples" value="500" />
            <param name="bootstrap_seed" value="24" />
            <assert_command>
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format csv" />
                <not_has_text text="degrees" />
                <not_has_text text="load-model" />
                <has_text text="bootstrap 3" />
                <has_text text="bootstrap-samples 500" />
                <has_text text="seed 24" />
                <has_text text="output output_constava.csv" />
            </assert_command>
            <output name="file_contents" file="expected/test_007.csv" ftype="csv" />
        </test>
        <!-- test_008: CSV Dihedrals in radians with bootstrap series with default train data -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="false" />
            <param name="subsampling_type" value="bootstrap" />
            <param name="bootstrap_size" value="3" />
            <param name="return_bootstrap_series" value="true" />
            <param name="bootstrap_samples" value="500" />
            <param name="bootstrap_seed" value="24" />
            <assert_command>
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format csv" />
                <not_has_text text="degrees" />
                <not_has_text text="load-model" />
                <has_text text="bootstrap-series 3" />
                <has_text text="bootstrap-samples 500" />
                <has_text text="seed 24" />
                <has_text text="output output_constava.csv" />
            </assert_command>
            <output name="file_contents" file="expected/test_008.csv" ftype="csv" />
        </test>
        <!-- test_009: CSV Dihedrals in radians with bootstrap using custom PDF using default PDF -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="grid" />
            <param name="grid_points" value="1500" />
            <param name="bandwidth" value="0.15" />
            <param name="subsampling_type" value="bootstrap" />
            <param name="bootstrap_size" value="3" />
            <param name="return_bootstrap_series" value="false" />
            <param name="bootstrap_samples" value="500" />
            <param name="bootstrap_seed" value="24" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <not_has_text text="input constava_csdata.json" />
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format csv" />
                <has_text text="load-model" />
                <has_text text="bootstrap 3" />
                <has_text text="bootstrap-samples 500" />
                <has_text text="seed 24" />
                <has_text text="output output_constava.csv" />
            </assert_command>
            <output name="file_contents" file="expected/test_009.csv" ftype="csv" />
        </test>
        <!-- test_010: CSV Dihedrals in radians with bootstrap using custom PDF using custom json -->
        <test expect_num_outputs="1">
            <param name="input_files" value="csv/dihedrals.csv" />
            <param name="input_format" value="csv" />
            <param name="input_degrees" value="Radians" />
            <param name="use_custom_model" value="true" />
            <param name="model_type" value="grid" />
            <param name="grid_points" value="1500" />
            <param name="bandwidth" value="0.15" />
            <param name="use_custom_input_file" value="true" />
            <param name="custom_input_file" value="constava_csdata.json" />
            <param name="subsampling_type" value="bootstrap" />
            <param name="bootstrap_size" value="3" />
            <param name="return_bootstrap_series" value="false" />
            <param name="bootstrap_samples" value="500" />
            <param name="bootstrap_seed" value="24" />
            <assert_command>
                <has_text text="constava fit-model -vv"/>
                <has_text text="input constava_csdata.json" />
                <has_text text="constava analyze -vv"/>
                <has_text text="input-format csv" />
                <has_text text="load-model" />
                <has_text text="bootstrap 3" />
                <has_text text="bootstrap-samples 500" />
                <has_text text="seed 24" />
                <has_text text="output output_constava.csv" />
            </assert_command>
            <output name="file_contents" file="expected/test_010.csv" ftype="csv" />
        </test>
    </tests>
    <help>
    <![CDATA[
    **Constava** analyzes conformational ensembles calculating conformational state propensities
    and conformational state variability. The conformational state propensities indicate the likelihood
    of a residue residing in a given conformational state, while the conformational state variability
    is a measure of the residues ability to transition between conformational states.

    Each conformational state is a statistical model of based on the backbone dihedrals (phi, psi).
    The default models were derived from an analysis of NMR ensembles and chemical shifts.
    To analyze a conformational ensemble, the phi- and psi-angles for each conformational state in the ensemble
    need to be provided.

    As input data **Constava** needs the backbone dihedral angles extracted from the conformational ensemble.
    These dihedrals can be obtained using GROMACS' gmx chi module (set Input file format as 'xvg')
    or using the Python **Constava** dihedrals submodule, which supports a wide range of MD and structure formats.

Inputs
------

    - **Input files:** Upload the files containing dihedral angles. Supported formats include CSV and XVG.
    - **Input degrees:** Indicate whether the dihedral angles in your input files are in radians or degrees.

Kernel Options
--------------

    Configure probability density functions (PDFs). You can choose to use predefined PDFs or fit your own PDFs from custom data.

Subsampling Options
-------------------

    Set up different subsampling methods like window-based analysis and bootstrap sampling to analyze data variability.

    - **Window size:** Define sizes for moving frame analysis, which could consist of multiple consecutive samples.
    - **Bootstrap size:** Specify sizes for bootstrap methods to enhance statistical robustness.

Outputs
-------

    - **Output file:** Retrieves the results file that contains calculated variability measures. The format and detail level of this file depend on your configured settings and selections in subsampling options.

    **Note:** This tool requires careful setup of parameters to ensure accurate and meaningful results. Default settings are provided for quick setups but might need adjustments based on your specific data and analysis requirements.

Project Links
---------------------

* `GitHub <https://github.com/Bio2Byte/constava>`_
* `Python Index (PyPI) <https://pypi.org/project/constava/>`_
* `Bioconda <https://anaconda.org/bioconda/constava>`_

Authors
-------

* Jose Gavalda-Garcia
* David Bickel
* Joel Roca-Martinez
* Daniele Raimondi
* Gabriele Orlando
* Wim Vranken


Acknowledgments
---------------

* Adrián Díaz
* Iman Jouiad
* VIB Data Core, specially:
    * Boris Depoortere
    * Paul De Geest
    * Rafael Andrade Buono
    ]]>
    </help>
    <citations>
        <citation type="doi">doi:10.1093/nargab/lqae082</citation>
    </citations>
</tool>
