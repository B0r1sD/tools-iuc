<tool id="rctd" name="RCTD" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Cell type identification with RCTD</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p 'results'
        mkdir -p 'figures'

    ]]></command>
    <configfiles>
        <configfile name="rctd_script">
            # rctd script
            # This file is used to specify the parameters for the rctd from spacexr package

            # Load the spacexr library
            library('spacexr')

            ### Load the scRNA-seq data
            counts &lt;- read.table(file = '${sc_count}', row.names = 1, sep = '\t')
            metadata &lt;- read.table(file = '${metadata}', sep = '\t')

            # create cell_types named list
            cell_types &lt;- metadata[,"annotation"]; names(cell_types) &lt;- metadata[,"barcode"]
            
            # convert to factor data type
            cell_types &lt;- as.factor(cell_types)

            #if str($sc_umi_input) == 'True':
                # create nUMI named list
                nUMI &lt;- meta_data[, "nUMI"]; names(nUMI) &lt;- meta_data[,"barcode"]
            #end if

            # Create reference object
            reference &lt;- Reference(
                                counts = counts,
                                cell_types = cell_types,
                                #if str($sc_umi_input) == 'True':
                                    nUMI = nUMI,
                                #end if
                                n_max_cells = $n_max_cells,
                                min_UMI = $min_UMI
                                )

            ### Load spatial data
            counts &lt;- read.table(file = '${st_count}', row.names = 1, sep = '\t')
            coords &lt;- read.table(file = '${coord}', row.names = 1, sep = '\t')

            nUMI &lt;- colSums(counts) # In tutorials it is always the sum of counts

            # Create SpatialRNA object
            puck &lt;- SpatialRNA(
                            coords = coords,
                            counts = counts,
                            nUMI= nUMI,
                            )

            # provide a basic plot of the nUMI of each pixel on the plot:
            pdf('figures/nUMI_plot.pdf')
            plot_puck_continuous(
                puck = puck,
                barcodes = colnames(puck@counts),
                plot_val = puck@nUMI,
                ylimit = c(0,round(quantile(puck@nUMI,0.9))),
                title ='plot of nUMI')
            dev.off()

            ### Run the RCTD
            myRCTD &lt;- create.RCTD(
                            spatialRNA = puck,
                            reference = reference,
                            gene_cutoff = $gene_cutoff,
                            fc_cutoff = $fc_cutoff,
                            gene_cutoff_reg = $gene_cutoff_reg,
                            fc_cutoff_reg = $fc_cutoff_reg,
                            UMI_min = $UMI_min,
                            UMI_max = $UMI_max,
                            counts_MIN = $counts_MIN,
                            UMI_min_sigma = $UMI_min_sigma,
                            class_df = NULL, # set as default
                            CELL_MIN_INSTANCE = $CELL_MIN_INSTANCE,
                            cell_type_names = $cell_type_names,
                            MAX_MULTI_TYPES = $MAX_MULTI_TYPES,
                            keep_reference = F, # set as default
                            cell_type_profiles = NULL, # set as default
                            CONFIDENCE_THRESHOLD = $CONFIDENCE_THRESHOLD,
                            DOUBLET_THRESHOLD = $DOUBLET_THRESHOLD,)

            myRCTD &lt;- run.RCTD(
                            myRCTD,
                            doublet_mode = $doublet_mode,)

            results &lt;- myRCTD@results



            # Save the reference object
            saveRDS(reference, "results/SCRef.rds")



        </configfile>
    </configfiles>
    <inputs>
        <param name="sc_count" type="data" format="tabular" label="Single-cell count matrix" help="A matrix representing Digital Gene Expression (DGE). Rownames should be genes and colnames represent barcodes/cell names" />
        <param name="metadata" type="data" format="tabular" label="Metadata" help="single-cell annotation file with columns: barcode, annotation, and nUMI(optional)" />
        <param name="sc_umi_input" type="boolean" truevalue="True" falsevalue="False" checked="false" label="nUMI" help="Does your single-cell metadata have nUMI column?" />
        <section name="advanced_param" title="Advanced parameters">
            <section name="reference_param" title="Reference object parameters">
                <param name="n_max_cells" type="integer" min="0" value="10000" label="n_max_cells" help="Maximum number of cells per cell type. Will downsample if this number is exceeded." />
                <param name="min_UMI" type="integer" min="0" value="100" label="min_UMI" help="minimum UMI count for cells to be included in the reference." />
            </section>
        </section>











    </inputs>
    <outputs>

    </outputs>
    <tests>
        
    </tests>
    <help><![CDATA[

Robust Cell Type Decomposition, or **RCTD**, is an statistical method for learning cell types from spatial transcriptomics data.

To create the single-cell reference object, the following inputs are required:
    * counts: A matrix (or dgCmatrix) representing Digital Gene Expression (DGE). **Rownames** should be genes and **colnames** represent barcodes/cell names. Counts should be **untransformed** count-level data.
    * cell_types: A named (by cell barcode) factor of cell type for each cell.
    * nUMI: Optional, a named (by cell barcode) list of total counts or UMI&apos;s appearing at each cell. If not provided, nUMI will be assumed to be the total counts appearing on each cell. 


    ]]></help>

    <expand macro="citations" />
</tool>