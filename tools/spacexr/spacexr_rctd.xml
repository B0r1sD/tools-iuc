<tool id="spacexr_rctd" name="RCTD" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Cell type identification with RCTD</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p 'results'
        mkdir -p 'figures'
        Rscript '$rctd_script'
        #if str($rscript) == 'True':
            touch 'results/rctd_script.R'
            cat '$rctd_script' > 'results/rctd_script.R'
        #end if
    ]]></command>
    <configfiles>
        <configfile name="rctd_script">
            # rctd script
            # This file is used to specify the parameters for the rctd from spacexr package

            # Load the spacexr library
            library('spacexr')
            library('Matrix')

            ### Load the scRNA-seq data
            counts &lt;- read.table(file = '${sc_count}', row.names = 1, sep = '\t')
            metadata &lt;- read.table(file = '${metadata}', sep = '\t')

            # create cell_types named list
            cell_types &lt;- metadata[,"annotation"]; names(cell_types) &lt;- metadata[,"barcode"]
            
            # convert to factor data type
            cell_types &lt;- as.factor(cell_types)

            #if str($sc_umi_input) == 'True':
                # create nUMI named list
                nUMI &lt;- meta_data[, "nUMI"]; names(nUMI) &lt;- meta_data[,"barcode"]
            #end if

            # Create reference object
            reference &lt;- Reference(
                                counts = counts,
                                cell_types = cell_types,
                                #if str($sc_umi_input) == 'True':
                                    nUMI = nUMI,
                                #end if
                                n_max_cells = $n_max_cells,
                                min_UMI = $min_UMI
                                )

            ### Load spatial data
            counts &lt;- read.table(file = '${st_count}', row.names = 1, sep = '\t')
            coords &lt;- read.table(file = '${coord}', row.names = 1, sep = '\t')

            nUMI &lt;- colSums(counts) # In tutorials it is always the sum of counts

            # Create SpatialRNA object
            puck &lt;- SpatialRNA(
                            coords = coords,
                            counts = counts,
                            nUMI= nUMI,
                            )

            # provide a basic plot of the nUMI of each pixel on the plot:
            pdf('figures/nUMI_plot.pdf')
            plot_puck_continuous(
                puck = puck,
                barcodes = colnames(puck@counts),
                plot_val = puck@nUMI,
                ylimit = c(0,round(quantile(puck@nUMI,0.9))),
                title ='plot of nUMI')
            dev.off()

            ### Run the RCTD
            myRCTD &lt;- create.RCTD(
                            spatialRNA = puck,
                            reference = reference,
                            gene_cutoff = $gene_cutoff,
                            fc_cutoff = $fc_cutoff,
                            gene_cutoff_reg = $gene_cutoff_reg,
                            fc_cutoff_reg = $fc_cutoff_reg,
                            UMI_min = $UMI_min,
                            UMI_max = $UMI_max,
                            counts_MIN = $counts_MIN,
                            UMI_min_sigma = $UMI_min_sigma,
                            class_df = NULL, # set as default
                            CELL_MIN_INSTANCE = $CELL_MIN_INSTANCE,
                            #if str($cell_type_names) != "":
                                cell_type_names = $cell_type_names,
                            #end if                            
                            MAX_MULTI_TYPES = $MAX_MULTI_TYPES,
                            keep_reference = F, # set as default
                            cell_type_profiles = NULL, # set as default
                            CONFIDENCE_THRESHOLD = $CONFIDENCE_THRESHOLD,
                            DOUBLET_THRESHOLD = $DOUBLET_THRESHOLD,)

            myRCTD &lt;- run.RCTD(
                            myRCTD,
                            doublet_mode = $doublet_mode,)


            # save results
            #if str($doublet_mode) == 'doublet':
                results &lt;- myRCTD@results

                # save the data frame
                result_df &lt;- results$results_df
                write.table(result_df, file = 'results/doublet_results_df.tabular', sep = '\t', quote = F, row.names = T)

                # RCTD plots
                # normalize the cell type proportions to sum to 1.
                norm_weights &lt;- normalize_weights(results$weights)
                cell_type_names &lt;- myRCTD@cell_type_info$info[[2]] #list of cell type names
                spatialRNA &lt;- myRCTD@spatialRNA

                resultsdir &lt;- 'figures'
                
                # make the plots
                # Plots the confident weights for each cell type as in full_mode (saved as 'figures/cell_type_weights.pdf')
                plot_weights(cell_type_names, spatialRNA, resultsdir, norm_weights) 
                
                # Plots all weights for each cell type as in full_mode. (saved as 'figures/cell_type_weights_unthreshold.pdf')
                plot_weights_unthreshold(cell_type_names, spatialRNA, resultsdir, norm_weights) 
                
                # Plots the weights for each cell type as in doublet_mode. (saved as 'figures/cell_type_weights_doublets.pdf')
                plot_weights_doublet(cell_type_names, spatialRNA, resultsdir, results$weights_doublet,results$results_df)

                # Plots the number of confident pixels of each cell type in 'full_mode'. (saved as 'figures/cell_type_occur.pdf')
                plot_cond_occur(cell_type_names, resultsdir, norm_weights, spatialRNA)

                # makes a map of all cell types, (saved as 'results/all_cell_types.pdf')
                plot_all_cell_types(results$results_df, spatialRNA@coords, cell_type_names, resultsdir) 

                # doublets
                #obtain a dataframe of only doublets
                doublets &lt;- results$results_df[results$results_df$spot_class == "doublet_certain",] 
                
                # Plots all doublets in space (saved as 'results/all_doublets.pdf')
                plot_doublets(spatialRNA, doublets, resultsdir, cell_type_names)
            
                # Plots all doublets in space for each cell type (saved as 'results/all_doublets_type.pdf')
                plot_doublets_type(spatialRNA, doublets, resultsdir, cell_type_names) 
                
                # a table of frequency of doublet pairs 
                doub_occur &lt;- table(doublets$second_type, doublets$first_type) 
                # Plots a stacked bar plot of doublet ocurrences (saved as 'results/doublet_stacked_bar.pdf')
                plot_doub_occur_stack(doub_occur, resultsdir, cell_type_names) 
            #end if
            
            #if str($doublet_mode) == 'full':
                results &lt;- myRCTD@results

                # RCTD plots
                # normalize the cell type proportions to sum to 1.
                norm_weights &lt;- normalize_weights(results$weights)
                cell_type_names &lt;- myRCTD@cell_type_info$info[[2]] #list of cell type names
                spatialRNA &lt;- myRCTD@spatialRNA

                resultsdir &lt;- 'figures'

                # make the plots
                # Plots the confident weights for each cell type as in full_mode (saved as 'figures/cell_type_weights.pdf')
                plot_weights(cell_type_names, spatialRNA, resultsdir, norm_weights) 
                
                # Plots all weights for each cell type as in full_mode. (saved as 'figures/cell_type_weights_unthreshold.pdf')
                plot_weights_unthreshold(cell_type_names, spatialRNA, resultsdir, norm_weights) 

                # Plots the number of confident pixels of each cell type in 'full_mode'. (saved as 'figures/cell_type_occur.pdf')
                plot_cond_occur(cell_type_names, resultsdir, norm_weights, spatialRNA)
            #end if

            #if str($doublet_mode) == 'multi':
                sink('results/multi_results.txt')
                # Loop through all elements in "myRCTD@results"
                for (i in seq_along(myRCTD@results)) {
                cat('Examining results on pixel / spot', i, '\n')
                
                pixel &lt;- myRCTD@results[[i]]  # Access the ith pixel
                
                cat('Check convergence:\n')
                print(pixel$conv_sub)
                
                cat('Check cell types:\n')
                print(pixel$cell_type_list)
                
                cat('Check confidence:\n')
                print(pixel$conf_list)
                
                cat('Check weights:\n')
                print(pixel$sub_weights)
                
                cat('\n')
                }
                sink()
            #end if

            # save rds file
            #if str($rds) == 'True':
                saveRDS(myRCTD, file = 'results/rctd_results.rds')
            #end if
        </configfile>
    </configfiles>
    <inputs>
        <param name="sc_count" type="data" format="tabular" label="Single-cell count matrix" help="A matrix representing Digital Gene Expression (DGE). Rownames should be genes and colnames represent barcodes/cell names" />
        <param name="metadata" type="data" format="tabular" label="Metadata" help="single-cell annotation file with columns: barcode, annotation, and nUMI(optional)" />
        <param name="sc_umi_input" type="boolean" truevalue="True" falsevalue="False" checked="false" label="nUMI" help="Does your single-cell metadata have nUMI column?" />
        <param name="st_count" type="data" format="tabular" label="Spatial count matrix" help="A matrix representing Digital Gene Expression (DGE). Rownames should be genes and colnames represent barcodes/pixel names" />
        <param name="coord" type="data" format="tabular" label="Spatial coordinates" help="A numeric table representing the spatial pixel locations. Rownames are barcodes/pixel names, and there should be two columns for x and for y" />
        <param name="doublet_mode" type="select" label="Doublet mode">
            <option value="doublet">doublet</option>
            <option value="full">full</option>
            <option value="multi">multi</option>
        </param>
        <section name="advanced_param" title="Advanced parameters">
            <section name="reference_param" title="Reference object parameters">
                <param name="n_max_cells" type="integer" min="0" value="10000" label="n_max_cells" help="Maximum number of cells per cell type. Will downsample if this number is exceeded." />
                <param name="min_UMI" type="integer" min="0" value="100" label="min_UMI" help="Minimum UMI count for cells to be included in the reference." />
            </section>
            <section name="st_param" title="SpatialRNA object parameters">
                <param name="gene_cutoff" type="float" min="0" value="0.000125" label="gene_cutoff" help="Minimum normalized gene expression for genes to be included in the platform effect normalization step." />
                <param name="fc_cutoff" type="float" min="0" value="0.5" label="fc_cutoff" help="Minimum log-fold-change (across cell types) for genes to be included in the platform effect normalization step." />
                <param name="gene_cutoff_reg" type="float" min="0" value="0.0002" label="gene_cutoff_reg" help="Minimum normalized gene expression for genes to be included in the RCTD step." />
                <param name="fc_cutoff_reg" type="float" min="0" value="0.75" label="fc_cutoff_reg" help="Minimum log-fold-change (across cell types) for genes to be included in the RCTD step." />
                <param name="UMI_min" type="integer" min="0" value="100" label="UMI_min" help="Minimum UMI per pixel included in the analysis" />
                <param name="UMI_max" type="integer" min="0" value="20000000" label="UMI_max" help="Maximum UMI per pixel included in the analysis" />
                <param name="counts_MIN" type="integer" min="0" value="10" label="counts_MIN" help="Minimum total counts per pixel of genes used in the analysis." />
                <param name="UMI_min_sigma" type="integer" min="0" value="300" label="UMI_min_sigma" help="Minimum UMI per pixel for the choose_sigma_c function" />
                <param name="CELL_MIN_INSTANCE" type="integer" min="0" value="25" label="CELL_MIN_INSTANCE" help="Minimum number of cells required per cell type." />
                <param name="cell_type_names" type="text" label="cell_type_names" help="A list of cell types to be included from the reference. If NULL, uses all cell types" />
                <param name="MAX_MULTI_TYPES" type="integer" min="0" value="4" label="MAX_MULTI_TYPES" help="Max number of cell types per pixel." />
                <param name="CONFIDENCE_THRESHOLD" type="integer" min="0" value="5" label="CONFIDENCE_THRESHOLD" help="The minimum change in likelihood (compared to other cell types) necessary to determine a cell type identity with confidence." />
                <param name="DOUBLET_THRESHOLD" type="integer" min="0" value="20" label="DOUBLET_THRESHOLD" help="The penalty weight of predicting a doublet instead of a singlet for a pixel." />
            </section>
        </section>
        <section name="output" title="Output options">
            <param name="rds" type="boolean" truevalue="True" falsevalue="False" checked="false" label="save RDS file?"/>
            <param name="rscript" type="boolean" truevalue="True" falsevalue="False" checked="false" label="save RScript?"/>
        </section>
    </inputs>
    <outputs>

    </outputs>
    <tests>
        
    </tests>
    <help><![CDATA[

Robust Cell Type Decomposition, or **RCTD**, is an statistical method for learning cell types from spatial transcriptomics data.

**Reference object**:

To create the single-cell reference object, the following inputs are required:
    * counts: A matrix representing Digital Gene Expression (DGE). **Rownames** should be genes and **colnames** represent barcodes/cell names. Counts should be **untransformed** count-level data.
    * cell_types: A named (by cell barcode) factor of cell type for each cell.
    * nUMI: Optional, a named (by cell barcode) list of total counts or UMI&apos;s appearing at each cell. If not provided, nUMI will be assumed to be the total counts appearing on each cell. 

**SpatialRNA object**:

To create the spatialRNA object, the following inputs are required:
    * coords: A numeric table representing the spatial pixel locations. **Rownames** are barcodes/pixel names, and there should be two columns for **x** and for **y**.
    * counts: A matrix representing Digital Gene Expression (DGE). **Rownames** should be genes and **colnames** represent barcodes/pixel names. Counts should be **untransformed** count-level data.

-----

RCTD has **three** modes:
    * **doublet mode**, which assigns 1-2 cell types per spot and is recommended for technologies with high spatial resolution such as Slide-seq and MERFISH.
    * **full mode**, which assigns any number of cell types per spot and is recommended for technologies with poor spatial resolution such as 100-micron resolution Visium.
    * **multi mode**, an extension of doublet mode that can discover more than two cell types per spot (3-4 cell types) as an alternative option to full mode.

    ]]></help>

    <expand macro="citations" />
</tool>